import os
import re
import requests
from dotenv import load_dotenv

# Optional pretty output
try:
    from rich.console import Console
    from rich.table import Table
    from rich.text import Text
    console = Console()
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False

# -------------------------------------------------------------------
# Setup and constants
# -------------------------------------------------------------------

load_dotenv()
API_KEY = os.getenv("ACH_API_KEY")
API_URL = "https://mb-api.abuse.ch/api/v1/"

# Regex for hash validation
HASH_REGEX = re.compile(r"^[A-Fa-f0-9]{32,64}$")
hash_regex = HASH_REGEX  # backward compatibility alias

# -------------------------------------------------------------------
# Core functionality
# -------------------------------------------------------------------

def mb_lookup(file_hash: str, return_json: bool = False):
    """
    Query MalwareBazaar for information about a hash.

    Args:
        file_hash (str): The hash (MD5/SHA1/SHA256) to check.
        return_json (bool): If True, return parsed JSON instead of printing.

    Returns:
        dict | None: Parsed data if available.
    """

    # --- Validation ---
    if not API_KEY:
        print("[!] Missing API key. Set ACH_API_KEY in your .env file or environment.")
        return None

    if not HASH_REGEX.match(file_hash):
        print(f"[!] Invalid hash format: {file_hash}")
        return None

    headers = {"Auth-Key": API_KEY}
    data = {"query": "get_info", "hash": file_hash}

    try:
        response = requests.post(API_URL, headers=headers, data=data, timeout=10)
        response.raise_for_status()
    except requests.exceptions.Timeout:
        print("[!] Request timed out while contacting MalwareBazaar.")
        return None
    except requests.exceptions.RequestException as e:
        print(f"[!] Network error: {e}")
        return None

    try:
        json_resp = response.json()
    except ValueError:
        print("[!] Invalid JSON response from MalwareBazaar.")
        return None

    status = json_resp.get("query_status")
    if status == "hash_not_found":
        print(f"No results found for hash: {file_hash}")
        return None
    elif status == "illegal_hash":
        print(f"The provided hash is not valid: {file_hash}")
        return None

    data = json_resp.get("data", [])
    if not data:
        print("[!] No data available.")
        return None

    entry = data[0]

    if return_json:
        return entry

    _print_malware_report(entry)


# -------------------------------------------------------------------
# Pretty Printing
# -------------------------------------------------------------------

def _print_malware_report(entry: dict):
    """Render MalwareBazaar result nicely in CLI."""
    sha256 = entry.get("sha256_hash")
    file_name = entry.get("file_name")
    file_type = entry.get("file_type")
    first_seen = entry.get("first_seen")
    signature = entry.get("signature")
    tags = ", ".join(entry.get("tags", [])) or "None"

    vendor = entry.get("vendor_intel", {})
    file_info = entry.get("file_information", [])

    # --- Rich output ---
    if RICH_AVAILABLE:
        console.print("\n[bold cyan]MALWAREBAZAAR INTELLIGENCE REPORT[/bold cyan]\n")

        table = Table(show_header=False, expand=True)
        table.add_row("SHA256", sha256 or "N/A")
        table.add_row("File Name", file_name or "N/A")
        table.add_row("File Type", file_type or "N/A")
        table.add_row("First Seen", first_seen or "N/A")
        table.add_row("Signature", signature or "N/A")
        table.add_row("Tags", tags)
        console.print(table)

        # Vendor intel section
        if vendor:
            console.print("\n[bold]Vendor Intelligence:[/bold]")
            for name, info in vendor.items():
                if isinstance(info, list):
                    info = info[0]
                verdict = info.get("verdict") or info.get("status") or "N/A"
                link = info.get("analysis_url") or info.get("link") or ""
                score = info.get("score")
                details = f"{verdict}"
                if score:
                    details += f" (Score: {score})"
                if link:
                    details += f" — {link}"
                console.print(f"• [cyan]{name}[/cyan]: {details}")

        if file_info:
            console.print(f"\n[bold]Sandbox Results:[/bold] {file_info[0].get('value', 'N/A')}")
        console.print("=" * 60 + "\n")

    # --- Plain text fallback ---
    else:
        print("=" * 60)
        print("MALWAREBAZAAR INTELLIGENCE REPORT")
        print("=" * 60)
        print(f"SHA256     : {sha256}")
        print(f"File Name  : {file_name}")
        print(f"File Type  : {file_type}")
        print(f"First Seen : {first_seen}")
        print(f"Signature  : {signature}")
        print(f"Tags       : {tags}")
        print("-" * 60)

        if vendor:
            print("Vendor Intelligence:")
            for name, info in vendor.items():
                if isinstance(info, list):
                    info = info[0]
                verdict = info.get("verdict") or info.get("status") or "N/A"
                link = info.get("analysis_url") or info.get("link") or ""
                score = info.get("score")
                details = verdict
                if score:
                    details += f" (Score: {score})"
                if link:
                    details += f" — {link}"
                print(f"  • {name}: {details}")

        if file_info:
            print(f"Sandbox    : {file_info[0].get('value', 'N/A')}")

        print("=" * 60, "\n")


# -------------------------------------------------------------------
# CLI entry point
# -------------------------------------------------------------------

if __name__ == "__main__":
    hash_value = input("Enter file hash (MD5, SHA1, or SHA256): ").strip()
    mb_lookup(hash_value)